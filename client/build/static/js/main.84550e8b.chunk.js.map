{"version":3,"sources":["interface/Board.ts","interface/BoardCell.ts","components/canvas/EnemyCanvas.tsx","interface/Ship.ts","components/canvas/PlayerCanvas.tsx","components/PlayArea.tsx","components/StatusArea/StatusMessage.tsx","components/StatusArea/StatusBox.tsx","components/StatusArea/StatusTurn.tsx","components/StatusArea/StatusArea.tsx","components/chat/ChatMessage.tsx","components/chat/ChatBox.tsx","components/chat/ChatSend.tsx","components/chat/Chat.tsx","components/NaviBar.tsx","components/PlayerDetails/PlayerHeader.tsx","components/PlayerDetails/PlayerDetails.tsx","components/Stats/Stats.tsx","components/App.tsx","index.tsx"],"names":["Board","bn","board","boardName","this","BoardCell","x","y","o","h","w","c","part","owner","hover","hit","EnemyCanvas","props","enemyBoard","lastMoveResult","enemyCells","importBoard","shipCount","height","width","canvasRef","React","b","enemySocket","saveBoard","a","obj","roomID","player","PlayerName","boardCell","state","fetch","method","headers","Accept","body","JSON","stringify","response","json","console","log","getBoard","request","i","length","setState","GameStatus","CurrentTurn","ShipsRemaining","GameState","EnemyShipsR","screen","ctx","undefined","Carrier","Battleship","Cruiser","Submarine","Destroyer","Array","addCells","className","id","ref","current","getContext","setSocket","startGame","setEvents","requestAnimationFrame","update","io","emit","on","setupBoard","setBoard","drawCells","checkStatus","Setup","GameOver","Winner","updateGameState","canvas","addEventListener","event","clientX","getBoundingClientRect","left","clientY","top","toggleCell","hoverEffect","cells","forEach","cell","fillStyle","fillRect","s","narr","n","arr","contains","updateMoves","Player","Move","move","m","clearRect","Ship","size","name","orientation","PlayerCanvas","playerBoard","playerCells","currentShip","shipCells","ships","ship","exported","playerSocket","saveB","prevState","ShipParts","ShipRemaining","clicks","CurrentShip","updateCurrentShip","createShipList","checkRemainingShips","exportBoard","PlayerShipsR","checkValid","finalCheck","checkShipTurn","carr","bat","cru","sub","dest","push","newArray","Playing","SetupMessages","checkValidCell","clearInvalid","direction","cellCheck","filter","StatusMessage","StatusBox","messages","map","message","key","statusDiv","document","getElementById","scrollTop","scrollHeight","StatusTurn","currentTurn","StatusArea","Moves","ChatMessage","sender","me","username","text","ChatBox","chatDiv","ChatSend","chatInput","handleText","bind","handleSubmit","onSubmit","type","onChange","value","placeholder","required","e","target","preventDefault","onSend","Chat","socket","sendMessage","user","updateMessages","meCheck","TempMessage","PlayArea","playSocket","loaded","test","saveState","getState","roomid","dataFromChild","moveUpdate","setUpdate","setInterval","NaviBar","Navbar","variant","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","onClick","stats","PlayerHeader","PlayerDetails","handleLoad","disableButton","playerName","room","handleLogin","setRoom","gameID","handleChange","Button","Stats","ActiveUsers","Hits","Misses","getStats","drawChart","xLocation","d","data","svg","d3","append","attr","selectAll","enter","labels","App","getDetails","getRoomID","showStats","g","login","enemyName","native","items","from","opacity","leave","show","div","style","path","exact","render","routeProps","enemy","ReactDOM"],"mappings":"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","file":"static/js/main.84550e8b.chunk.js","sourcesContent":["export class Board {\r\n  public board: number[];\r\n  public boardName: string;\r\n  constructor(bn: string) {\r\n    this.boardName = bn;\r\n    this.board = [];\r\n  }\r\n}\r\n","export class BoardCell {\r\n  public x: number;\r\n  public y: number;\r\n  public h: number;\r\n  public w: number;\r\n  public c: string;\r\n  public part: string;\r\n  public owner: string;\r\n  public hover = false;\r\n  public hit = false;\r\n  constructor(x: number, y: number, o: string) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = 50;\r\n    this.h = 50;\r\n    this.part = 'empty';\r\n    this.owner = o;\r\n  }\r\n  public contains(x: number, y: number): boolean {\r\n    return x > this.x && x < this.x + this.w && y > this.y && y < this.y + this.w;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Board } from '../../interface/Board';\r\nimport { BoardCell } from '../../interface/BoardCell';\r\nimport { ICanvas, IMoveListItem } from '../../interface/IGameProp';\r\nimport { GameStatus } from '../PlayArea';\r\nimport io from 'socket.io-client';\r\n\r\ninterface EnemyCanvasState {\r\n  GameStatus: GameStatus;\r\n  CurrentTurn: string;\r\n  ShipsRemaining: number;\r\n  screen: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  ctx?: CanvasRenderingContext2D;\r\n  getBoard: boolean;\r\n}\r\n\r\nexport class EnemyCanvas extends React.Component<ICanvas, EnemyCanvasState> {\r\n  public enemyBoard: Board;\r\n  public lastMoveResult: string;\r\n  private enemyCells: BoardCell[];\r\n  private importBoard: number[];\r\n  private shipCount: Record<string, number>;\r\n  private height = 510;\r\n  private width = 510;\r\n  private canvasRef = React.createRef<HTMLCanvasElement>();\r\n  private b = true;\r\n  enemySocket: SocketIOClient.Socket;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      GameStatus: props.GameState.GameStatus,\r\n      CurrentTurn: props.GameState.CurrentTurn,\r\n      ShipsRemaining: props.GameState.EnemyShipsR,\r\n      screen: {\r\n        width: this.width,\r\n        height: this.height,\r\n      },\r\n      ctx: undefined,\r\n      getBoard: props.getBoard,\r\n    };\r\n    this.shipCount = { Carrier: 5, Battleship: 5, Cruiser: 3, Submarine: 3, Destroyer: 2 };\r\n    this.enemyCells = new Array(100);\r\n    this.enemyCells = this.addCells(0, 0, 'enemy');\r\n    this.lastMoveResult = ' ';\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"canvas-enemy\">\r\n        <canvas id=\"enemyC\" ref={this.canvasRef} width=\"510\" height=\"510\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the context for the boards canvas and then starts the main animation loop.\r\n   *\r\n   * @memberof EnemyCanvas\r\n   */\r\n  public componentDidMount(): void {\r\n    const ctx = this.canvasRef.current.getContext('2d');\r\n    if (this.props.getBoard) {\r\n      this.getBoard();\r\n    }\r\n    this.setSocket();\r\n    this.setState({ ctx });\r\n    this.startGame();\r\n    this.setEvents();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n  public componentDidUpdate(): void {\r\n    this.saveBoard();\r\n  }\r\n  private saveBoard = async (): Promise<any> => {\r\n    const obj = {\r\n      roomID: this.props.roomID,\r\n      player: this.props.PlayerName,\r\n      boardCell: this.enemyCells,\r\n      lastMoveResult: this.lastMoveResult,\r\n      enemyBoard: this.enemyBoard,\r\n      importBoard: this.importBoard,\r\n      shipCount: this.shipCount,\r\n      state: this.state,\r\n    };\r\n    const response = await fetch(`https://reactships.herokuapp.com/api/enemyBoard/${this.props.roomID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(obj),\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n  };\r\n\r\n  private getBoard = async (): Promise<any> => {\r\n    const request = await fetch(\r\n      `https://reactships.herokuapp.com/api/enemyBoard/${this.props.roomID}&${this.props.PlayerName}`,\r\n    );\r\n    const json = await request.json();\r\n    for (let i = 0; i < this.enemyCells.length; i++) {\r\n      this.enemyCells[i].x = json.boardCell[i].x;\r\n      this.enemyCells[i].y = json.boardCell[i].y;\r\n      this.enemyCells[i].h = json.boardCell[i].h;\r\n      this.enemyCells[i].w = json.boardCell[i].w;\r\n      this.enemyCells[i].c = json.boardCell[i].c;\r\n      this.enemyCells[i].part = json.boardCell[i].part;\r\n      this.enemyCells[i].owner = json.boardCell[i].owner;\r\n      this.enemyCells[i].hover = json.boardCell[i].hover;\r\n      this.enemyCells[i].hit = json.boardCell[i].hit;\r\n    }\r\n    this.setState({\r\n      GameStatus: json.state.GameStatus,\r\n      CurrentTurn: json.state.CurrentTurn,\r\n      ShipsRemaining: json.state.ShipsRemaining,\r\n    });\r\n    this.setState({ getBoard: false });\r\n    this.b = false;\r\n  };\r\n  private setSocket(): void {\r\n    this.enemySocket = io('https://reactships.herokuapp.com/play');\r\n    this.enemySocket.emit('join', this.props.roomID);\r\n    this.enemySocket.on('setEnemyBoard', (board: any) => {\r\n      if (this.props.PlayerName !== board.boardName) {\r\n        this.setupBoard(board.board);\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupBoard(board: number[]): void {\r\n    this.importBoard = board;\r\n    this.setBoard();\r\n  }\r\n  /**\r\n   * Main Gameloop. Checks to see if the game is set to restart. If it is the game\r\n   * is restarted. After this the cells are drawn and the main game loop is run.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private update(): void {\r\n    this.drawCells(this.enemyCells);\r\n    this.checkStatus();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the game for the enemies board. Also used to reset a game.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private startGame(): void {\r\n    this.setState({\r\n      GameStatus: GameStatus.Setup,\r\n    });\r\n    this.enemyBoard = new Board('enemy');\r\n    this.enemyCells = new Array(100);\r\n    this.enemyCells = this.addCells(0, 0, 'enemy');\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the player has won the game or not.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private checkStatus(): void {\r\n    if (this.state.ShipsRemaining === 0) {\r\n      this.props.GameState.GameStatus = GameStatus.GameOver;\r\n      this.props.GameState.Winner = 'Player Wins!';\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the onclick and on mousemove events for the canvas\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private setEvents(): void {\r\n    const canvas = this.canvasRef.current;\r\n    canvas.addEventListener('click', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      this.saveBoard();\r\n      if (this.props.GameState.GameStatus === 1 && this.props.GameState.CurrentTurn !== this.props.PlayerName) {\r\n        this.enemySocket.emit('enemyMove', this.props.roomID, x, y, this.props.PlayerName);\r\n        this.toggleCell(this.enemyCells, x, y);\r\n      }\r\n    });\r\n    this.canvasRef.current.addEventListener('mousemove', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.props.GameState.GameStatus === 1) {\r\n        this.hoverEffect(this.enemyCells, x, y);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draws the cells within the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} cells\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private drawCells(cells: BoardCell[]): void {\r\n    const ctx = this.state.ctx;\r\n    cells.forEach(cell => {\r\n      ctx.fillStyle = cell.c;\r\n      ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {string} s\r\n   * @returns {BoardCell[]}\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private addCells(x: number, y: number, s: string): BoardCell[] {\r\n    const narr: BoardCell[] = new Array(100);\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let n = 0; n < 10; n++) {\r\n        narr[i + n * 10] = new BoardCell(i * 50 + x, n * 50 + y, s);\r\n        narr[i + n * 10].c = s === 'enemy' ? '#8F282F' : '#464478';\r\n      }\r\n    }\r\n    return narr;\r\n  }\r\n\r\n  /**\r\n   * Toggles the cell depending on the if the cell is empty or not and updates the\r\n   * current move history depending on the cells status.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private toggleCell(arr: BoardCell[], x: number, y: number): void {\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y)) {\r\n        if (cell.part !== 'empty' && !cell.hit) {\r\n          cell.c = 'red';\r\n          this.lastMoveResult = 'Hit!';\r\n          const move: IMoveListItem = {\r\n            Player: 'Player',\r\n            Move: `Hit!`,\r\n          };\r\n          cell.hit = true;\r\n          this.shipCount[cell.part] = this.shipCount[cell.part] - 1;\r\n          if (this.shipCount[cell.part] === 0) {\r\n            move.Player = 'Player';\r\n            move.Move = `${cell.part} was sunk`;\r\n            this.props.GameState.EnemyShipsR--;\r\n            this.setState({ ShipsRemaining: this.state.ShipsRemaining - 1 });\r\n            if (this.state.ShipsRemaining === 0) {\r\n              this.setState({\r\n                GameStatus: GameStatus.GameOver,\r\n              });\r\n              this.props.GameState.GameStatus = GameStatus.GameOver;\r\n            }\r\n          }\r\n          this.props.updateMoves(move);\r\n          this.props.GameState.CurrentTurn = this.props.PlayerName;\r\n          this.props.updateGameState(this.props.GameState);\r\n        } else if (cell.part === 'empty' && !cell.hit) {\r\n          cell.c = 'white';\r\n          const move: IMoveListItem = {\r\n            Player: 'Player',\r\n            Move: 'Miss!',\r\n          };\r\n          this.props.updateMoves(move);\r\n          cell.hit = true;\r\n          this.props.GameState.CurrentTurn = this.props.PlayerName;\r\n          this.props.updateGameState(this.props.GameState);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  private sendStats(m: string): void {\r\n    if (m === 'Hit') {\r\n      this.enemySocket.emit('hit');\r\n    } else {\r\n      this.enemySocket.emit('miss');\r\n    }\r\n  }\r\n  /**\r\n   * Import the board from the server and sets the board cells relative to the array\r\n   * received.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private setBoard(): void {\r\n    //Import the board from the server.\r\n    for (let i = 0; i < this.importBoard.length; i++) {\r\n      if (this.importBoard[i] === 0) {\r\n        this.enemyCells[i].part = 'empty';\r\n      } else if (this.importBoard[i] === 1) {\r\n        this.enemyCells[i].part = 'Carrier';\r\n      } else if (this.importBoard[i] === 2) {\r\n        this.enemyCells[i].part = 'Battleship';\r\n      } else if (this.importBoard[i] === 3) {\r\n        this.enemyCells[i].part = 'Cruiser';\r\n      } else if (this.importBoard[i] === 4) {\r\n        this.enemyCells[i].part = 'Submarine';\r\n      } else {\r\n        this.enemyCells[i].part = 'Destroyer';\r\n      }\r\n    }\r\n    this.shipCount = { Carrier: 5, Battleship: 5, Cruiser: 3, Submarine: 3, Destroyer: 2 };\r\n  }\r\n\r\n  /**\r\n   * Creates a hover type effect over the given boardcell.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private hoverEffect(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y)) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n      } else {\r\n        ctx.clearRect(cell.x, cell.y, cell.w, cell.w);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IShip } from './IShip';\r\n\r\nexport class Ship implements IShip {\r\n  public size: number;\r\n  public name: string;\r\n  public orientation: string;\r\n  public c: string;\r\n  constructor(n: string, s: number, c: string) {\r\n    this.size = s;\r\n    this.name = n;\r\n    this.c = c;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Board } from '../../interface/Board';\r\nimport { BoardCell } from '../../interface/BoardCell';\r\nimport { ICanvas, IMoveListItem } from '../../interface/IGameProp';\r\nimport { Ship } from '../../interface/Ship';\r\nimport { GameStatus } from '../PlayArea';\r\nimport io from 'socket.io-client';\r\n\r\ninterface IGameState {\r\n  GameStatus: GameStatus;\r\n  ShipRemaining: number;\r\n  ShipParts: {\r\n    Carrier: number;\r\n    Battleship: number;\r\n    Cruiser: number;\r\n    Submarine: number;\r\n    Destroyer: number;\r\n  };\r\n  screen: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  CurrentShip: string;\r\n  clicks: number;\r\n  getBoard: boolean;\r\n  ctx?: CanvasRenderingContext2D;\r\n}\r\n\r\nexport class PlayerCanvas extends React.Component<ICanvas, IGameState> {\r\n  public playerBoard: Board;\r\n  private playerCells: BoardCell[];\r\n  private currentShip: Ship;\r\n  private shipCells: BoardCell[] = [];\r\n  private ships: Ship[];\r\n  private ship: number;\r\n  private height = 510;\r\n  private width = 510;\r\n  private canvasRef = React.createRef<HTMLCanvasElement>();\r\n  private exported = 0;\r\n  private b = true;\r\n\r\n  playerSocket: SocketIOClient.Socket;\r\n  private saveB = false;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      CurrentShip: 'Carrier',\r\n      GameStatus: props.GameState.GameStatus,\r\n      ShipRemaining: 5,\r\n      ShipParts: {\r\n        Carrier: 5,\r\n        Battleship: 4,\r\n        Cruiser: 3,\r\n        Submarine: 3,\r\n        Destroyer: 2,\r\n      },\r\n      screen: {\r\n        width: this.width,\r\n        height: this.height,\r\n      },\r\n      clicks: 0,\r\n      getBoard: props.getBoard,\r\n    };\r\n    this.ships = this.createShipList();\r\n    this.playerBoard = new Board(this.props.PlayerName);\r\n    this.playerCells = this.addCells(0, 0, 'player');\r\n    this.ship = 0;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"canvas-player\">\r\n        <canvas id=\"playerC\" ref={this.canvasRef} width={this.state.screen.width} height={this.state.screen.height} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the context for the boards canvas and then starts the main animation loop.\r\n   *\r\n   *\r\n   */\r\n  public componentDidMount(): void {\r\n    const ctx = this.canvasRef.current.getContext('2d');\r\n    if (this.props.getBoard) {\r\n      this.getBoard();\r\n    }\r\n    this.setState({ ctx });\r\n    this.startGame();\r\n\r\n    this.setSocket();\r\n    this.setEvents();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n  public componentDidUpdate(): void {\r\n    this.saveBoard();\r\n  }\r\n  private saveBoard = async (): Promise<any> => {\r\n    const obj = {\r\n      roomID: this.props.roomID,\r\n      player: this.props.PlayerName,\r\n      boardCell: this.playerCells,\r\n      state: this.state,\r\n      ships: this.ships,\r\n      ship: this.ship,\r\n      playerBoard: this.playerBoard,\r\n      currentShip: this.currentShip,\r\n      shipCells: this.shipCells,\r\n      exported: this.exported,\r\n    };\r\n    const response = await fetch(`https://reactships.herokuapp.com/api/playerBoard/${this.props.roomID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(obj),\r\n    });\r\n    const json = await response.json();\r\n    console.log(json);\r\n  };\r\n  private getBoard = async (): Promise<any> => {\r\n    const response = await fetch(\r\n      `https://reactships.herokuapp.com/api/playerBoard/${this.props.roomID}&${this.props.PlayerName}`,\r\n    );\r\n    const json = await response.json();\r\n    for (let i = 0; i < this.playerCells.length; i++) {\r\n      this.playerCells[i].x = json.boardCell[i].x;\r\n      this.playerCells[i].y = json.boardCell[i].y;\r\n      this.playerCells[i].h = json.boardCell[i].h;\r\n      this.playerCells[i].w = json.boardCell[i].w;\r\n      this.playerCells[i].c = json.boardCell[i].c;\r\n      this.playerCells[i].part = json.boardCell[i].part;\r\n      this.playerCells[i].owner = json.boardCell[i].owner;\r\n      this.playerCells[i].hover = json.boardCell[i].hover;\r\n      this.playerCells[i].hit = json.boardCell[i].hit;\r\n    }\r\n    this.exported = json.exported;\r\n    for (let i = 0; i < this.ships.length; i++) {\r\n      this.ships[i].c = json.ships[i].c;\r\n      this.ships[i].name = json.ships[i].name;\r\n      this.ships[i].size = json.ships[i].size;\r\n    }\r\n    for (let i = 0; i < this.shipCells.length; i++) {\r\n      this.shipCells[i].x = json.shipCells[i].x;\r\n      this.shipCells[i].y = json.shipCells[i].y;\r\n      this.shipCells[i].h = json.shipCells[i].h;\r\n      this.shipCells[i].w = json.shipCells[i].w;\r\n      this.shipCells[i].c = json.shipCells[i].c;\r\n      this.shipCells[i].part = json.shipCells[i].part;\r\n      this.shipCells[i].owner = json.shipCells[i].owner;\r\n      this.shipCells[i].hover = json.shipCells[i].hover;\r\n      this.shipCells[i].hit = json.shipCells[i].hit;\r\n    }\r\n    this.currentShip = json.currentShip;\r\n    this.ship = json.ship;\r\n    this.setState(prevState => {\r\n      const ShipParts = { ...prevState.ShipParts };\r\n      ShipParts.Carrier = json.state[0].ShipParts.Carrier;\r\n      ShipParts.Battleship = json.state[0].ShipParts.Battleship;\r\n      ShipParts.Cruiser = json.state[0].ShipParts.Cruiser;\r\n      ShipParts.Submarine = json.state[0].ShipParts.Submarine;\r\n      ShipParts.Destroyer = json.state[0].ShipParts.Destroyer;\r\n      return { ShipParts };\r\n    });\r\n    this.setState({ ShipRemaining: json.state[0].ShipRemaining, clicks: json.state[0].clicks });\r\n    this.setState({\r\n      CurrentShip: json.state[0].CurrentShip,\r\n    });\r\n    this.saveB = true;\r\n    this.updateCurrentShip();\r\n    this.setState({ getBoard: false });\r\n    this.b = false;\r\n  };\r\n  private setSocket(): void {\r\n    this.playerSocket = io('https://reactships.herokuapp.com/play');\r\n    this.playerSocket.emit('join', this.props.roomID);\r\n    this.playerSocket.on('enemySendMove', (x: number, y: number, name: string) => {\r\n      if (name !== this.props.PlayerName) {\r\n        for (const cell of this.playerCells) {\r\n          if (cell.contains(x, y)) {\r\n            if (cell.part === 'Carrier') {\r\n              this.setState(prevState => {\r\n                const ShipParts = { ...prevState.ShipParts };\r\n                ShipParts.Carrier--;\r\n                return { ShipParts };\r\n              });\r\n              if (this.state.ShipParts.Carrier === 0) {\r\n                this.checkRemainingShips();\r\n              }\r\n            } else if (cell.part === 'Battleship') {\r\n              this.setState(prevState => {\r\n                const ShipParts = { ...prevState.ShipParts };\r\n                ShipParts.Battleship--;\r\n                return { ShipParts };\r\n              });\r\n              if (this.state.ShipParts.Battleship === 0) {\r\n                this.checkRemainingShips();\r\n              }\r\n            } else if (cell.part === 'Cruiser') {\r\n              this.setState(prevState => {\r\n                const ShipParts = { ...prevState.ShipParts };\r\n                ShipParts.Cruiser--;\r\n                return { ShipParts };\r\n              });\r\n              if (this.state.ShipParts.Cruiser === 0) {\r\n                this.checkRemainingShips();\r\n              }\r\n            } else if (cell.part === 'Submarine') {\r\n              this.setState(prevState => {\r\n                const ShipParts = { ...prevState.ShipParts };\r\n                ShipParts.Submarine--;\r\n                return { ShipParts };\r\n              });\r\n              if (this.state.ShipParts.Submarine === 0) {\r\n                this.checkRemainingShips();\r\n              }\r\n            } else if (cell.part === 'empty') {\r\n              cell.hit = true;\r\n              cell.c = 'white';\r\n              cell.part = 'empty'; // #TODO: Fix this up.\r\n              this.props.GameState.CurrentTurn = 'Player';\r\n              const move: IMoveListItem = {\r\n                Player: 'Enemy',\r\n                Move: 'Miss!',\r\n              };\r\n              this.props.updateMoves(move);\r\n              this.props.updateGameState(this.props.GameState);\r\n              break;\r\n            } else {\r\n              this.setState(prevState => {\r\n                const ShipParts = { ...prevState.ShipParts };\r\n                ShipParts.Destroyer--;\r\n                return { ShipParts };\r\n              });\r\n              if (this.state.ShipParts.Destroyer === 0) {\r\n                this.checkRemainingShips();\r\n              }\r\n            }\r\n            cell.hit = true;\r\n            cell.c = 'red';\r\n            cell.part = 'empty'; // #TODO: Fix this up.\r\n            this.props.GameState.CurrentTurn = 'Player';\r\n            const move: IMoveListItem = {\r\n              Player: 'Enemy',\r\n              Move: 'Hit!',\r\n            };\r\n            this.props.updateMoves(move);\r\n            this.props.updateGameState(this.props.GameState);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Main drawloop. Resets the game if flagged and then calls the update functions\r\n   * for the game.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private update(): void {\r\n    this.drawCells(this.playerCells);\r\n    if (this.props.GameState.GameStatus === 1) {\r\n      if (this.exported === 0) {\r\n        this.exportBoard();\r\n      }\r\n    }\r\n    if (this.state.GameStatus === 2) {\r\n    }\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets up the game for the player and also resets the game when flagged.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private startGame(): void {\r\n    this.setState({\r\n      GameStatus: GameStatus.Setup,\r\n    });\r\n    this.playerCells = [];\r\n    this.shipCells = [];\r\n    this.ship = 0;\r\n    this.currentShip = this.ships[this.ship];\r\n    this.playerBoard = new Board(this.props.PlayerName);\r\n    this.playerCells = this.addCells(0, 0, 'player');\r\n    this.props.GameState.CurrentShip = 'Carrier';\r\n    this.props.GameState.GameStatus = GameStatus.Setup;\r\n    this.setState({ CurrentShip: 'Carrier' });\r\n    this.ships = this.createShipList();\r\n    this.props.updateGameState(this.props.GameState);\r\n    this.setState(prevState => {\r\n      const ShipParts = { ...prevState.ShipParts };\r\n      ShipParts.Carrier = 5;\r\n      ShipParts.Battleship = 4;\r\n      ShipParts.Cruiser = 3;\r\n      ShipParts.Submarine = 3;\r\n      ShipParts.Destroyer = 2;\r\n      return { ShipParts };\r\n    });\r\n    this.setState({ ShipRemaining: 5, clicks: 0 });\r\n  }\r\n\r\n  /**\r\n   * Checks the remaining ships for the player. If none are Left the enemy has won.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkRemainingShips(): void {\r\n    this.setState({\r\n      ShipRemaining: this.state.ShipRemaining - 1,\r\n    });\r\n    this.props.GameState.PlayerShipsR--;\r\n    this.props.updateGameState(this.props.GameState);\r\n    if (this.state.ShipRemaining === 0) {\r\n      this.props.GameState.Winner = 'Enemy Wins!';\r\n      this.props.GameState.GameStatus = GameStatus.GameOver;\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the events for mouse clicks and mouse overs.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private setEvents(): void {\r\n    const canvas = this.canvasRef.current;\r\n    canvas.addEventListener('click', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.props.GameState.GameStatus === 0) {\r\n        this.toggleCell(this.playerCells, x, y);\r\n        this.checkValid();\r\n        this.saveBoard();\r\n        if (this.state.clicks === this.currentShip.size) {\r\n          this.finalCheck();\r\n        }\r\n        this.checkShipTurn();\r\n      }\r\n    });\r\n\r\n    this.canvasRef.current.addEventListener('mousemove', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.props.GameState.GameStatus === 0) {\r\n        this.hoverEffect(this.playerCells, x, y);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update which ship is being placed in the game state.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private updateCurrentShip(): void {\r\n    this.props.GameState.CurrentShip = this.state.CurrentShip;\r\n    this.props.updateGameState(this.props.GameState);\r\n  }\r\n\r\n  /**\r\n   * Generates and sets the ship parts for the player.\r\n   *\r\n   * @private\r\n   * @returns {Ship[]}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private createShipList(): Ship[] {\r\n    const ships = [];\r\n    const carr = new Ship('Carrier', 5, '#752323');\r\n    const bat = new Ship('Battleship', 4, '#442375');\r\n    const cru = new Ship('Cruiser', 3, '#2e7523');\r\n    const sub = new Ship('Submarine', 3, '#23756e');\r\n    const dest = new Ship('Destroyer', 2, '#727523');\r\n    ships.push(carr);\r\n    ships.push(bat);\r\n    ships.push(cru);\r\n    ships.push(sub);\r\n    ships.push(dest);\r\n    return ships;\r\n  }\r\n\r\n  /**\r\n   * Draws the cells within the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} cells\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private drawCells(cells: BoardCell[]): void {\r\n    const ctx = this.state.ctx;\r\n    cells.forEach(cell => {\r\n      if (cell.part === 'empty') {\r\n        ctx.fillStyle = cell.c;\r\n        ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n      } else if (cell.part !== 'empty') {\r\n        this.ships.forEach(ship => {\r\n          if (ship.name === cell.part) {\r\n            ctx.fillStyle = ship.c;\r\n          }\r\n        });\r\n        ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {string} s\r\n   * @returns {BoardCell[]}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private addCells(x: number, y: number, s: string): BoardCell[] {\r\n    const newArray: BoardCell[] = new Array(100);\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let n = 0; n < 10; n++) {\r\n        newArray[i + n * 10] = new BoardCell(i * 50 + x, n * 50 + y, s);\r\n        newArray[i + n * 10].c = s === 'enemy' ? '#8F282F' : '#464478';\r\n      }\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  /**\r\n   * Check which ship the player should be currently placing and then starts the\r\n   * game when the last ship is placed.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkShipTurn(): void {\r\n    if (this.shipCells.length === this.currentShip.size) {\r\n      if (this.currentShip.name === 'Destroyer') {\r\n        this.setState({ GameStatus: GameStatus.Playing });\r\n        this.props.GameState.GameStatus = this.state.GameStatus;\r\n        this.props.GameState.CurrentTurn = 'Player';\r\n        this.props.updateGameState(this.props.GameState);\r\n        this.playerBoard = new Board(this.props.PlayerName);\r\n        this.playerCells.forEach(cell => {\r\n          if (cell.part === 'empty') {\r\n            this.playerBoard.board.push(0);\r\n          } else if (cell.part === 'Carrier') {\r\n            this.playerBoard.board.push(1);\r\n          } else if (cell.part === 'Battleship') {\r\n            this.playerBoard.board.push(2);\r\n          } else if (cell.part === 'Cruiser') {\r\n            this.playerBoard.board.push(3);\r\n          } else if (cell.part === 'Submarine') {\r\n            this.playerBoard.board.push(4);\r\n          } else {\r\n            this.playerBoard.board.push(5);\r\n          }\r\n        });\r\n      } else {\r\n        this.setState({ clicks: 0 });\r\n        this.ship++;\r\n        this.currentShip = this.ships[this.ship];\r\n        this.setState({ CurrentShip: this.currentShip.name });\r\n        this.updateCurrentShip();\r\n        this.shipCells = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the BoardCells depending what ship the player is placing.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private toggleCell(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    if (this.props.GameState.GameStatus === 0) {\r\n      this.props.GameState.SetupMessages = '';\r\n      this.props.updateGameState(this.props.GameState);\r\n      arr.forEach(cell => {\r\n        if (cell.contains(x, y) && this.state.clicks !== this.currentShip.size && cell.part === 'empty') {\r\n          this.shipCells.push(cell);\r\n          cell.part = this.currentShip.name;\r\n          this.setState({ clicks: this.state.clicks + 1 });\r\n        }\r\n      });\r\n    } else {\r\n      arr.forEach(cell => {\r\n        if (cell.contains(x, y) && this.state.clicks !== this.currentShip.size && cell.part === 'empty') {\r\n          this.shipCells.push(cell);\r\n          cell.part = 'enemy';\r\n          ctx.fillStyle = 'red';\r\n          ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n          this.setState({ clicks: this.state.clicks + 1 });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private checkValid(): void {\r\n    if (!this.checkValidCell()) {\r\n      this.clearInvalid();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the cells the players ship is in if its invalid.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private clearInvalid(): void {\r\n    this.props.GameState.SetupMessages = 'Invalid Ship Placement';\r\n    this.props.updateGameState(this.props.GameState);\r\n    this.playerCells.forEach(cell => {\r\n      if (cell.part === this.currentShip.name) {\r\n        cell.part = 'empty';\r\n      }\r\n    });\r\n    this.shipCells = [];\r\n    this.setState({ clicks: 0 });\r\n  }\r\n\r\n  /**\r\n   * Checks to see if there are any invalid moves from the player once their ship\r\n   * has been replaced. This is done by checking their direction it was placed\r\n   * and flagging it invalid if its invalid if they are not along the right x/y\r\n   * location\r\n   *\r\n   * @private\r\n   * @returns {boolean}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkValidCell(): boolean {\r\n    let direction: string;\r\n    if (this.shipCells.length === 1) {\r\n      return true;\r\n    } else if (this.shipCells.length > 1) {\r\n      if (this.shipCells[0].x === this.shipCells[1].x) {\r\n        direction = 'h';\r\n      } else if (this.shipCells[0].y === this.shipCells[1].y) {\r\n        direction = 'v';\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < this.shipCells.length; i++) {\r\n        if (direction === 'h') {\r\n          if (this.shipCells[0].x !== this.shipCells[i].x) {\r\n            return false;\r\n          }\r\n        } else if (direction === 'v') {\r\n          if (this.shipCells[0].y !== this.shipCells[i].y) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Last check to see if the player has correctly placed the ship. Every cell\r\n   * is checked within 50 pixels to make sure they are all connected.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private finalCheck(): void {\r\n    let direction: string;\r\n    const cellCheck = this.playerCells.filter(cell => cell.part === this.currentShip.name);\r\n    if (cellCheck[0].x === cellCheck[1].x) {\r\n      direction = 'v';\r\n    } else if (cellCheck[0].y === cellCheck[1].y) {\r\n      direction = 'h';\r\n    }\r\n    for (let i = 0, n = 1; i < cellCheck.length - 1; i++, n++) {\r\n      if (direction === 'h') {\r\n        if (cellCheck[i].x + 50 === cellCheck[n].x || cellCheck[i].x - 50 === cellCheck[n].x) {\r\n          continue;\r\n        }\r\n\r\n        this.clearInvalid();\r\n        return;\r\n      }\r\n      if (direction === 'v') {\r\n        if (cellCheck[i].y + 50 === cellCheck[n].y || cellCheck[i].y - 50 === cellCheck[n].y) {\r\n          continue;\r\n        }\r\n        this.clearInvalid();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a hover type effect over the given boardcell.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private hoverEffect(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y)) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n      } else {\r\n        ctx.clearRect(cell.x, cell.y, cell.w, cell.w);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Exports the current board to the server\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private exportBoard(): void {\r\n    this.playerSocket.emit('playerBoard', this.playerBoard, this.props.roomID);\r\n    this.exported = 1;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { IGameProp, IGameState, IMoveListItem, IPlayAreaProp } from '../interface/IGameProp';\r\nimport { EnemyCanvas } from './canvas/EnemyCanvas';\r\nimport { PlayerCanvas } from './canvas/PlayerCanvas';\r\nimport { StatusArea } from './StatusArea/StatusArea';\r\nimport { Chat } from './chat/Chat';\r\n\r\nexport enum GameStatus {\r\n  Setup,\r\n  Playing,\r\n  GameOver,\r\n}\r\n\r\nexport class PlayArea extends React.Component<IPlayAreaProp, IGameProp> {\r\n  playSocket: SocketIOClient.Socket;\r\n  loaded = true;\r\n  test: any;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      roomID: this.props.roomid,\r\n      GameState: {\r\n        CurrentShip: null,\r\n        CurrentTurn: null,\r\n        Moves: [],\r\n        GameStatus: GameStatus.Setup,\r\n        Winner: null,\r\n        EnemyShipsR: 5,\r\n        PlayerShipsR: 5,\r\n        SetupMessages: null,\r\n      },\r\n      PlayerName: this.props.player,\r\n      getBoard: this.props.getBoard,\r\n    };\r\n  }\r\n  public componentDidMount(): void {\r\n    if (this.props.getBoard) {\r\n      this.loaded = false;\r\n      this.getState();\r\n    }\r\n    this.setUpdate();\r\n    this.test = setInterval(() => this.setUpdate(), 5000);\r\n  }\r\n\r\n  public setUpdate(): void {\r\n    if (this.props.getBoard === false && this.loaded === true) {\r\n      this.saveState();\r\n    }\r\n  }\r\n  public componentWillUnmount(): void {\r\n    this.playSocket.emit('disconnect');\r\n  }\r\n  private saveState = async (): Promise<any> => {\r\n    const obj = { roomID: this.state.roomID, PlayerName: this.props.player, state: this.state };\r\n    const request = await fetch(`https://reactships.herokuapp.com/api/gamestate/${this.state.roomID}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(obj),\r\n    });\r\n    const json = await request.json();\r\n    console.log(json);\r\n  };\r\n\r\n  private getState = async (): Promise<any> => {\r\n    const request = await fetch(`https://reactships.herokuapp.com/api/gamestate/${this.props.roomid}&${this.props.player}`);\r\n    const json = await request.json();\r\n    console.log(json.state);\r\n    this.setState({\r\n      GameState: json.state.GameState,\r\n    });\r\n    this.setState({ getBoard: false });\r\n    this.loaded = true;\r\n  };\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"play-area\">\r\n        <EnemyCanvas\r\n          updateGameState={this.updateGameState}\r\n          updateMoves={this.updateMoves}\r\n          GameState={this.state.GameState}\r\n          roomID={this.state.roomID}\r\n          PlayerName={this.state.PlayerName}\r\n          getBoard={this.state.getBoard}\r\n        />\r\n        <PlayerCanvas\r\n          updateGameState={this.updateGameState}\r\n          updateMoves={this.updateMoves}\r\n          GameState={this.state.GameState}\r\n          roomID={this.state.roomID}\r\n          PlayerName={this.state.PlayerName}\r\n          getBoard={this.state.getBoard}\r\n        />\r\n        <StatusArea GameState={this.state.GameState} roomID={this.props.roomid} />\r\n\r\n        <Chat username={this.props.player} roomID={this.props.roomid} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the Game State with the provided data.\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private updateGameState = (dataFromChild: IGameState): void => {\r\n    this.setState((prevState: any) => {\r\n      let GameState: IGameState = { ...prevState.GameState };\r\n      GameState = dataFromChild;\r\n      return { GameState };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the move list for the players\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private updateMoves = (moveUpdate: IMoveListItem): void => {\r\n    this.setState((prevState: any) => {\r\n      const GameState: IGameState = { ...prevState.GameState };\r\n      GameState.Moves.push(moveUpdate);\r\n      return { GameState };\r\n    });\r\n  };\r\n}\r\n","import * as React from 'react';\r\n\r\nexport default class StatusMessage extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <div className=\"status-name\">{this.props.player}</div>\r\n        <div className=\"status-msg\">{this.props.move}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport StatusMessage from './StatusMessage';\r\nimport { IMoveListItem } from '../../interface/IGameProp';\r\n\r\nexport default class StatusBox extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    const messages: IMoveListItem[] = this.props.messages.map((message:IMoveListItem, i:number) => {\r\n      return <StatusMessage key={i} player={message.Player} move={message.Move} />;\r\n    });\r\n    return (\r\n      <div className=\"status-messages\" id=\"status-list\">\r\n        {messages}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidUpdate(): void {\r\n    const statusDiv = document.getElementById('status-list');\r\n    statusDiv.scrollTop = statusDiv.scrollHeight;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  currentTurn: string;\r\n}\r\n\r\nexport const StatusTurn: React.FC<Props> = (props: Props): JSX.Element => {\r\n  return <div className=\"current-turn\">{props.currentTurn}'s Turn</div>;\r\n};\r\n","import * as React from 'react';\r\nimport '../../styles/status.scss';\r\nimport StatusBox from './StatusBox';\r\nimport { StatusTurn } from './StatusTurn';\r\n\r\nexport class StatusArea extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    if (this.props.GameState.GameStatus === 0) {\r\n      return (\r\n        <div className=\"status-area\">\r\n          <div>Currently Placing: {this.props.GameState.CurrentShip}</div>\r\n          <div>{this.props.GameState.SetupMessages}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"status-area playing\">\r\n          <StatusTurn currentTurn={this.props.GameState.CurrentTurn} />\r\n          <StatusBox messages={this.props.GameState.Moves} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface ChatMessageProps {\r\n  username: string;\r\n  text: string;\r\n  me: boolean;\r\n}\r\n\r\nexport default class ChatMessage extends React.Component<ChatMessageProps, any> {\r\n  public render(): JSX.Element {\r\n    const sender = this.props.me ? 'player-message' : 'enemy';\r\n    return (\r\n      <div className={sender}>\r\n        <div className=\"username\">{this.props.username}</div>\r\n        <div className=\"message-body\">{this.props.text}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { ChatMessages } from './Chat';\r\nimport ChatMessage from './ChatMessage';\r\n\r\ninterface IChatProps {\r\n  messages: ChatMessages[];\r\n}\r\nexport class ChatBox extends React.Component<IChatProps, any> {\r\n  public render(): JSX.Element {\r\n    const messages = this.props.messages.map((message, i) => {\r\n      return <ChatMessage key={i} username={message.username} text={message.text} me={message.me} />;\r\n    });\r\n\r\n    return (\r\n      <div className=\"messages\" id=\"messageList\">\r\n        {messages}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidUpdate(): void {\r\n    const chatDiv = document.getElementById('messageList');\r\n    chatDiv.scrollTop = chatDiv.scrollHeight;\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport class ChatSend extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      chatInput: '',\r\n    };\r\n    this.handleText = this.handleText.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleText}\r\n          id=\"chat-box\"\r\n          value={this.state.chatInput}\r\n          placeholder=\"Type a message and press enter...\"\r\n          required\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n  handleText(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    this.setState({ chatInput: e.target.value });\r\n  }\r\n  handleSubmit(e: any): void {\r\n    e.preventDefault();\r\n    this.props.onSend(this.state.chatInput, this.props.username);\r\n    this.setState({ chatInput: '' });\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { ChatBox } from './ChatBox';\r\nimport { ChatSend } from './ChatSend';\r\nimport '../../styles/chat.scss';\r\nimport io from 'socket.io-client';\r\n\r\ninterface ChatState {\r\n  username: string;\r\n}\r\n\r\nexport interface ChatMessages {\r\n  username: string;\r\n  text: string;\r\n  me: boolean;\r\n}\r\n\r\nexport class Chat extends React.Component<any, any> {\r\n  socket: SocketIOClient.Socket;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      username: props.username,\r\n    };\r\n  }\r\n  public componentDidMount(): void {\r\n    this.socket = io('https://reactships.herokuapp.com');\r\n    this.socket.emit('join', this.props.username, this.props.roomID);\r\n    this.socket.on('message', (message: any, user: any) => {\r\n      this.updateMessages(message, user);\r\n    });\r\n  }\r\n  public componentWillUnmount(): void {\r\n    this.socket.emit('disconnect');\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"chat-area\" id=\"chat\">\r\n        <span className=\"chat-title\">Chat</span>\r\n        <ChatBox messages={this.state.messages} />\r\n        <ChatSend onSend={this.sendMessage} username={this.props.username} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private sendMessage = (message: any, user: any): void => {\r\n    this.socket.emit('sendMessage', message, this.props.roomID, this.props.username);\r\n  };\r\n\r\n  private updateMessages = (message: any, user: any): void => {\r\n    let meCheck = false;\r\n    const messages = this.state.messages;\r\n    if (user === this.props.username) {\r\n      meCheck = true;\r\n    }\r\n    const TempMessage = {\r\n      username: user,\r\n      text: message,\r\n      me: meCheck,\r\n    };\r\n    messages.push(TempMessage);\r\n    this.setState({ messages });\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nexport default class NaviBar extends React.Component<any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Navbar variant=\"dark\" expand=\"lg\">\r\n        <LinkContainer to=\"/\">\r\n          <Navbar.Brand>ReactShips</Navbar.Brand>\r\n        </LinkContainer>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>Home</Nav.Link>\r\n            </LinkContainer>\r\n            <Nav.Link onClick={this.props.stats}>Stats</Nav.Link>\r\n            <div className=\"navbar-text\">Room ID: {this.props.roomid}</div>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const PlayerHeader: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"player-h\">Player Details</h1>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../../styles/login.scss';\r\nimport { PlayerHeader } from './PlayerHeader';\r\ninterface PlayerDetailsProps {\r\n  handleLogin?: any;\r\n  player?: any;\r\n  room?: any;\r\n}\r\n\r\ninterface PlayerDetailsState {\r\n  playerName: string;\r\n  roomID: string;\r\n  disableButton: boolean;\r\n  newGame: boolean;\r\n}\r\n\r\nclass PlayerDetails extends React.Component<PlayerDetailsProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: '',\r\n      roomID: '',\r\n      disableButton: false,\r\n    };\r\n  }\r\n  public render(): JSX.Element {\r\n    return (\r\n      <form className=\"player-details\">\r\n        <PlayerHeader />\r\n\r\n        <label>\r\n          <span className=\"player-name\">Please Enter your Player Name</span>\r\n        </label>\r\n\r\n        <input type=\"text\" name=\"playerName\" required onChange={this.handleChange} value={this.state.playerName} />\r\n\r\n        <label>\r\n          <span className=\"room-id\">Room ID</span> {/** Room ID used to connect to other players*/}\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"room-input\"\r\n          name=\"roomID\"\r\n          onChange={this.handleChange}\r\n          value={this.state.roomID}\r\n        />\r\n        <Button variant=\"outline-success\" type=\"submit\" name=\"New\" onClick={this.handleSubmit}>\r\n          New / Join Game\r\n        </Button>\r\n        <Button variant=\"outline-success\" type=\"submit\" name=\"Load\" onClick={this.handleLoad}>\r\n          Load Game\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  private handleLoad = (e: any): void => {\r\n    e.preventDefault();\r\n    if (this.state.disableButton) {\r\n      return;\r\n    }\r\n    this.props.player(this.state.playerName);\r\n    if (this.state.roomID !== '') {\r\n      this.props.room(this.state.roomID);\r\n      this.props.handleLogin(true, true);\r\n    }\r\n    this.setState({ disableButton: true });\r\n  };\r\n\r\n  private handleSubmit = (e: any): void => {\r\n    e.preventDefault();\r\n    if (this.state.disableButton) {\r\n      return;\r\n    }\r\n    this.props.player(this.state.playerName);\r\n    if (this.state.roomID !== '') {\r\n      this.props.room(this.state.roomID);\r\n      this.props.handleLogin(true, false);\r\n    } else {\r\n      this.setRoom();\r\n    }\r\n    this.setState({ disableButton: true });\r\n  };\r\n\r\n  private setRoom = async (): Promise<any> => {\r\n    const gameID = await fetch('https://reactships.herokuapp.com/api/gameID');\r\n    const json = await gameID.json();\r\n    this.setState({ roomID: json.id });\r\n    this.props.room(this.state.roomID);\r\n    this.props.handleLogin(true, false);\r\n  };\r\n\r\n  private handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n}\r\n\r\nexport default PlayerDetails;\r\n","import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport interface IStatsProps {}\r\ninterface stats {\r\n  ActiveUsers: number;\r\n  Hits: number;\r\n  Misses: number;\r\n}\r\n/**\r\n * Stats drop down box with stats regarding to the games ActiveUsers, Hits and Misses.\r\n *\r\n *\r\n * @class Stats\r\n * @extends {React.Component<any, any>}\r\n */\r\n\r\nexport default class Stats extends React.Component<IStatsProps> {\r\n  stats: stats = {\r\n    ActiveUsers: 0,\r\n    Hits: 0,\r\n    Misses: 0,\r\n  };\r\n  public render(): JSX.Element {\r\n    return <div id=\"chart-test\" className=\"chart-test\"></div>;\r\n  }\r\n  componentDidMount(): void {\r\n    this.getStats();\r\n  }\r\n  getStats = async (): Promise<any> => {\r\n    const response = await fetch('https://reactships.herokuapp.com/api/stats');\r\n    const json = await response.json();\r\n    this.stats = json;\r\n    console.log(this.stats);\r\n    this.drawChart();\r\n  };\r\n\r\n  xLocation = (d: any, i: any, width: number, data: number): number => {\r\n    return i * (width / data) + width / data / 2;\r\n  };\r\n\r\n  drawChart(): void {\r\n    const data = [];\r\n    data.push({ name: 'Users', stats: this.stats.ActiveUsers });\r\n    data.push({ name: 'Hits', stats: this.stats.Hits });\r\n    data.push({ name: 'Misses', stats: this.stats.Misses });\r\n    const width = 600;\r\n    const height = 100;\r\n    const svg = d3\r\n      .select('#chart-test')\r\n      .append('svg')\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n\r\n    svg\r\n      .selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (d, i) => {\r\n        return i * (width / data.length);\r\n      })\r\n      .attr('y', d => {\r\n        return height - d.stats * 4;\r\n      })\r\n      .attr('width', width / data.length - 1)\r\n      .attr('height', d => {\r\n        return d.stats * 4;\r\n      })\r\n      .attr('fill', d => {\r\n        return `rgb(10, 0, ${d.stats * 10})`;\r\n      });\r\n    const labels = svg\r\n      .selectAll('text')\r\n      .data(data)\r\n      .enter();\r\n    labels\r\n      .append('text')\r\n      .text(stats => {\r\n        return stats.stats;\r\n      })\r\n      .attr('text-anchor', 'middle')\r\n      .attr('x', (stats, i) => this.xLocation(stats, i, width, data.length))\r\n      .attr('y', stats => {\r\n        return height - stats.stats * 4 + 14;\r\n      })\r\n      .attr('font-family', 'sans-serif')\r\n      .attr('font-size', '11px')\r\n      .attr('fill', 'white');\r\n    labels\r\n      .append('text')\r\n      .text(stats => {\r\n        return stats.name;\r\n      })\r\n      .attr('text-anchor', 'middle')\r\n      .attr('x', (stats, i) => this.xLocation(stats, i, width, data.length))\r\n\r\n      .attr('y', stats => {\r\n        return height - 16 - stats.stats * 4 + 14;\r\n      })\r\n      .attr('font-family', 'sans-serif')\r\n      .attr('font-size', '11px')\r\n      .attr('fill', 'white');\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { PlayArea } from './PlayArea';\r\nimport NaviBar from './NaviBar';\r\nimport PlayerDetails from './PlayerDetails/PlayerDetails';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Navbar} from 'react-bootstrap';\r\nimport Stats from './Stats/Stats';\r\nimport { animated } from 'react-spring';\r\nimport { Transition } from 'react-spring/renderprops';\r\n\r\ninterface AppState {\r\n  login: boolean;\r\n  playerName?: string;\r\n  roomID?: string;\r\n  enemyName?: string;\r\n  getBoard?: boolean;\r\n  loadGame?: boolean;\r\n  showStats: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<any, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      playerName: 'Player',\r\n      enemyName: 'No Enemy Ready',\r\n      showStats: false,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    if (this.state.login) {\r\n      return (\r\n        <Router>\r\n          <div>\r\n            <NaviBar roomid={this.state.roomID} stats={this.showStats} />\r\n            <Transition\r\n              native\r\n              items={this.state.showStats}\r\n              from={{ opacity: 0 }}\r\n              enter={{ opacity: 1 }}\r\n              leave={{ opacity: 0 }}\r\n            >\r\n              {(show): any =>\r\n                show &&\r\n                ((props): any => (\r\n                  <animated.div style={props}>\r\n                    <Stats />\r\n                  </animated.div>\r\n                ))\r\n              }\r\n            </Transition>\r\n            <Switch>\r\n              <Route\r\n                path=\"/\"\r\n                exact\r\n                render={(routeProps): any => (\r\n                  <PlayArea\r\n                    {...routeProps}\r\n                    player={this.state.playerName}\r\n                    enemy={this.state.enemyName}\r\n                    roomid={this.state.roomID}\r\n                    getBoard={this.state.getBoard}\r\n                  />\r\n                )}\r\n              />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Navbar variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand>ReactShips</Navbar.Brand>\r\n          </Navbar>\r\n          <div className=\"login-container\">\r\n            <PlayerDetails handleLogin={this.handleLogin} player={this.getDetails} room={this.getRoomID} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  getDetails = (name: string): any => {\r\n    this.setState({ playerName: name });\r\n  };\r\n\r\n  getRoomID = (id: string): void => {\r\n    if (id.length < 1) {\r\n    } else {\r\n      this.setState({ roomID: id });\r\n    }\r\n  };\r\n  showStats = (): void => this.setState({ showStats: !this.state.showStats });\r\n\r\n  handleLogin = (b: boolean, g: boolean): void => {\r\n    this.setState({ login: b });\r\n    this.setState({ getBoard: g });\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './styles/app.scss';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}