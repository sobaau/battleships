{"version":3,"sources":["interface/Board.ts","interface/BoardCell.ts","components/canvas/EnemyCanvas.tsx","interface/Ship.ts","components/canvas/PlayerCanvas.tsx","components/PlayArea.tsx","components/StatusArea/StatusMessage.tsx","components/StatusArea/StatusBox.tsx","components/StatusArea/StatusTurn.tsx","components/StatusArea/StatusArea.tsx","components/chat/ChatMessage.tsx","components/chat/ChatBox.tsx","components/chat/ChatSend.tsx","components/chat/Chat.tsx","components/NaviBar.tsx","components/PlayerDetails/PlayerHeader.tsx","components/PlayerDetails/PlayerDetails.tsx","components/Info/ShipTable.tsx","components/Info/Info.tsx","components/Stats/Stats.tsx","components/App.tsx","index.tsx"],"names":["Board","bn","board","boardName","this","BoardCell","x","y","o","h","w","c","part","owner","hover","hit","EnemyCanvas","props","enemyBoard","lastMoveResult","enemyCells","tempBoard","shipCount","height","width","canvasRef","React","state","GameStatus","GameState","CurrentTurn","ShipsRemaining","EnemyShipsR","screen","ctx","undefined","Map","Array","addCells","eboard","setBoard","clear","className","id","ref","current","getContext","setState","startGame","setEvents","requestAnimationFrame","update","ResE","Setup","updateGameState","drawCells","checkStatus","GameOver","Winner","canvas","addEventListener","event","clientX","getBoundingClientRect","left","clientY","top","toggleCell","hoverEffect","cells","forEach","cell","fillStyle","fillRect","s","narr","i","n","arr","contains","updateMoves","Player","Move","move","set","get","length","clearRect","Ship","size","name","orientation","PlayerCanvas","playerBoard","playerCells","currentShip","shipCells","ships","ship","CurrentShip","ShipRemaining","ShipParts","Carrier","Battleship","Cruiser","Submarine","Destroyer","clicks","createShipList","ResP","playGame","prevState","PlayerShipsR","randomCell","Math","floor","random","checkRemainingShips","checkValid","finalCheck","checkShipTurn","carr","bat","cru","sub","dest","push","newArray","Playing","updateCurrentShip","SetupMessages","checkValidCell","clearInvalid","direction","cellCheck","filter","StatusMessage","player","StatusBox","messages","map","message","key","statusDiv","document","getElementById","scrollTop","scrollHeight","StatusTurn","currentTurn","StatusArea","Moves","ChatMessage","sender","me","username","text","ChatBox","chatDiv","ChatSend","chatInput","handleText","bind","handleSubmit","onSubmit","type","onChange","value","placeholder","required","e","target","preventDefault","onSend","Chat","socket","sendMessage","Message","updateMessages","io","PlayArea","dataFromChild","moveUpdate","restartGame","readyAction","console","log","JSON","stringify","loadGame","roomID","roomid","PlayerName","EnemyName","enemy","button","disabled","onClick","enemyName","NaviBar","Navbar","variant","expand","to","Brand","Toggle","aria-controls","Collapse","Nav","Link","PlayerHeader","PlayerDetails","playerName","room","handleLogin","handleChange","Button","ShipTable","Info","Stats","drawChart","d3","append","attr","selectAll","data","enter","d","App","getDetails","getRoomID","a","fetch","json","b","login","path","exact","render","routeProps","component","ReactDOM"],"mappings":"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","file":"static/js/main.1ec32315.chunk.js","sourcesContent":["export class Board {\r\n  public board: number[];\r\n  public boardName: string;\r\n  constructor(bn: string) {\r\n    this.boardName = bn;\r\n    this.board = [];\r\n  }\r\n}\r\n","export class BoardCell {\r\n  public x: number;\r\n  public y: number;\r\n  public h: number;\r\n  public w: number;\r\n  public c: string;\r\n  public part: string;\r\n  public owner: string;\r\n  public hover = false;\r\n  public hit = false;\r\n  constructor(x: number, y: number, o: string) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.w = 50;\r\n    this.h = 50;\r\n    this.part = 'empty';\r\n    this.owner = o;\r\n  }\r\n  public contains(x: number, y: number): boolean {\r\n    return x > this.x && x < this.x + this.w && y > this.y && y < this.y + this.w;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Board } from '../../interface/Board';\r\nimport { BoardCell } from '../../interface/BoardCell';\r\nimport { ICanvas, IMoveListItem } from '../../interface/IGameProp';\r\nimport { GameStatus } from '../PlayArea';\r\nimport * as eboard from './enemyboard.json';\r\n\r\ninterface EnemyCanvasState {\r\n  GameStatus: GameStatus;\r\n  CurrentTurn: string;\r\n  ShipsRemaining: number;\r\n  screen: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  ctx?: CanvasRenderingContext2D;\r\n}\r\n\r\nexport class EnemyCanvas extends React.Component<ICanvas, EnemyCanvasState> {\r\n  public enemyBoard: Board;\r\n  public lastMoveResult: string;\r\n  private enemyCells: BoardCell[];\r\n  private tempBoard: number[];\r\n  private shipCount: Map<string, number>;\r\n  private height = 510;\r\n  private width = 510;\r\n  private canvasRef = React.createRef<HTMLCanvasElement>();\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      GameStatus: props.GameState.GameStatus,\r\n      CurrentTurn: props.GameState.CurrentTurn,\r\n      ShipsRemaining: props.GameState.EnemyShipsR,\r\n      screen: {\r\n        width: this.width,\r\n        height: this.height,\r\n      },\r\n      ctx: undefined,\r\n    };\r\n    this.shipCount = new Map();\r\n    this.enemyBoard = new Board('enemy');\r\n    this.enemyCells = new Array(100);\r\n    this.enemyCells = this.addCells(0, 0, 'enemy');\r\n    this.tempBoard = eboard.board;\r\n    this.setBoard();\r\n    this.lastMoveResult = ' ';\r\n    this.shipCount.clear();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"canvas-enemy\">\r\n        <canvas id=\"enemyC\" ref={this.canvasRef} width=\"510\" height=\"510\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the context for the boards canvas and then starts the main animation loop.\r\n   *\r\n   * @memberof EnemyCanvas\r\n   */\r\n  public componentDidMount(): void {\r\n    const ctx = this.canvasRef.current.getContext('2d');\r\n    this.setState({ ctx });\r\n    this.startGame();\r\n    this.setEvents();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main Gameloop. Checks to see if the game is set to restart. If it is the game\r\n   * is restarted. After this the cells are drawn and the main game loop is run.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private update(): void {\r\n    if (this.props.GameState.ResE) {\r\n      this.startGame();\r\n      this.props.GameState.ResE = false;\r\n      this.props.GameState.GameStatus = GameStatus.Setup;\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n    this.drawCells(this.enemyCells);\r\n    this.checkStatus();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Starts the game for the enemies board. Also used to reset a game.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private startGame(): void {\r\n    this.setState({\r\n      GameStatus: GameStatus.Setup,\r\n    });\r\n    this.enemyBoard = new Board('enemy');\r\n    this.enemyCells = new Array(100);\r\n    this.enemyCells = this.addCells(0, 0, 'enemy');\r\n    this.setBoard();\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the player has won the game or not.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private checkStatus(): void {\r\n    if (this.state.ShipsRemaining === 0) {\r\n      this.props.GameState.GameStatus = GameStatus.GameOver;\r\n      this.props.GameState.Winner = 'Player Wins!';\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the onclick and on mousemove events for the canvas\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private setEvents(): void {\r\n    const canvas = this.canvasRef.current;\r\n    canvas.addEventListener('click', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.props.GameState.GameStatus === 1 && this.props.GameState.CurrentTurn === 'Player') {\r\n        this.toggleCell(this.enemyCells, x, y);\r\n      }\r\n    });\r\n\r\n    this.canvasRef.current.addEventListener('mousemove', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.props.GameState.GameStatus === 1) {\r\n        this.hoverEffect(this.enemyCells, x, y);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Draws the cells within the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} cells\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private drawCells(cells: BoardCell[]): void {\r\n    const ctx = this.state.ctx;\r\n    cells.forEach(cell => {\r\n      ctx.fillStyle = cell.c;\r\n      ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {string} s\r\n   * @returns {BoardCell[]}\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private addCells(x: number, y: number, s: string): BoardCell[] {\r\n    const narr: BoardCell[] = new Array(100);\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let n = 0; n < 10; n++) {\r\n        narr[i + n * 10] = new BoardCell(i * 50 + x, n * 50 + y, s);\r\n        narr[i + n * 10].c = s === 'enemy' ? '#8F282F' : '#464478';\r\n      }\r\n    }\r\n    return narr;\r\n  }\r\n\r\n  /**\r\n   * Toggles the cell depending on the if the cell is empty or not and updates the\r\n   * current move history depending on the cells status.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private toggleCell(arr: BoardCell[], x: number, y: number): void {\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y)) {\r\n        if (cell.part !== 'empty' && !cell.hit) {\r\n          cell.c = 'red';\r\n          this.lastMoveResult = 'Hit!';\r\n          const move: IMoveListItem = {\r\n            Player: 'Player',\r\n            Move: `Hit!`,\r\n          };\r\n          cell.hit = true;\r\n          this.shipCount.set(cell.part, this.shipCount.get(cell.part) - 1);\r\n          if (this.shipCount.get(cell.part) === 0) {\r\n            move.Player = 'Player';\r\n            move.Move = `${cell.part} was sunk`;\r\n            this.props.GameState.EnemyShipsR--;\r\n            this.setState({ ShipsRemaining: this.state.ShipsRemaining - 1 });\r\n            if (this.state.ShipsRemaining === 0) {\r\n              this.setState({\r\n                GameStatus: GameStatus.GameOver,\r\n              });\r\n              this.props.GameState.GameStatus = GameStatus.GameOver;\r\n            }\r\n          }\r\n          this.props.updateMoves(move);\r\n          this.props.GameState.CurrentTurn = 'Enemy';\r\n          this.props.updateGameState(this.props.GameState);\r\n        } else if (cell.part === 'empty' && !cell.hit) {\r\n          cell.c = 'white';\r\n          const move: IMoveListItem = {\r\n            Player: 'Player',\r\n            Move: 'Miss!',\r\n          };\r\n          this.props.updateMoves(move);\r\n          cell.hit = true;\r\n          this.props.GameState.CurrentTurn = 'Enemy';\r\n          this.props.updateGameState(this.props.GameState);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Import the board from the server and sets the board cells relative to the array\r\n   * received.\r\n   *\r\n   * @private\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private setBoard(): void {\r\n    //Import the board from the server.\r\n    for (let i = 0; i < this.tempBoard.length; i++) {\r\n      if (this.tempBoard[i] === 0) {\r\n        this.enemyCells[i].part = 'empty';\r\n      } else if (this.tempBoard[i] === 1) {\r\n        this.enemyCells[i].part = 'Carrier';\r\n      } else if (this.tempBoard[i] === 2) {\r\n        this.enemyCells[i].part = 'Battleship';\r\n      } else if (this.tempBoard[i] === 3) {\r\n        this.enemyCells[i].part = 'Cruiser';\r\n      } else if (this.tempBoard[i] === 4) {\r\n        this.enemyCells[i].part = 'Submarine';\r\n      } else {\r\n        this.enemyCells[i].part = 'Destroyer';\r\n      }\r\n    }\r\n    this.shipCount = new Map();\r\n    this.shipCount.set('Carrier', 5);\r\n    this.shipCount.set('Battleship', 4);\r\n    this.shipCount.set('Cruiser', 3);\r\n    this.shipCount.set('Submarine', 3);\r\n    this.shipCount.set('Destroyer', 2);\r\n  }\r\n\r\n  /**\r\n   * Creates a hover type effect over the given boardcell.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private hoverEffect(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y)) {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n      } else {\r\n        ctx.clearRect(cell.x, cell.y, cell.w, cell.w);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { IShip } from './IShip';\r\n\r\nexport class Ship implements IShip {\r\n  public size: number;\r\n  public name: string;\r\n  public orientation: string;\r\n  public c: string;\r\n  constructor(n: string, s: number, c: string) {\r\n    this.size = s;\r\n    this.name = n;\r\n    this.c = c;\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { Board } from '../../interface/Board';\r\nimport { BoardCell } from '../../interface/BoardCell';\r\nimport { ICanvas, IMoveListItem } from '../../interface/IGameProp';\r\nimport { Ship } from '../../interface/Ship';\r\nimport { GameStatus } from '../PlayArea';\r\n\r\ninterface IGameState {\r\n  GameStatus: GameStatus;\r\n  ShipRemaining: number;\r\n  ShipParts: {\r\n    Carrier: number;\r\n    Battleship: number;\r\n    Cruiser: number;\r\n    Submarine: number;\r\n    Destroyer: number;\r\n  };\r\n  screen: {\r\n    width: number;\r\n    height: number;\r\n  };\r\n  CurrentShip: string;\r\n  clicks: number;\r\n  ctx?: CanvasRenderingContext2D;\r\n}\r\n\r\nexport class PlayerCanvas extends React.Component<ICanvas, IGameState> {\r\n  public playerBoard: Board;\r\n  private playerCells: BoardCell[];\r\n  private currentShip: Ship;\r\n  private shipCells: BoardCell[] = [];\r\n  private ships: Ship[];\r\n  private ship: number;\r\n  private height = 510;\r\n  private width = 510;\r\n  private canvasRef = React.createRef<HTMLCanvasElement>();\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      CurrentShip: 'Carrier',\r\n      GameStatus: props.GameState.GameStatus,\r\n      ShipRemaining: 5,\r\n      ShipParts: {\r\n        Carrier: 5,\r\n        Battleship: 4,\r\n        Cruiser: 3,\r\n        Submarine: 3,\r\n        Destroyer: 2,\r\n      },\r\n      screen: {\r\n        width: this.width,\r\n        height: this.height,\r\n      },\r\n      clicks: 0,\r\n    };\r\n    this.ships = this.createShipList();\r\n    this.playerBoard = new Board('player');\r\n    this.playerCells = this.addCells(0, 0, 'player');\r\n    this.ship = 0;\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"canvas-player\">\r\n        <canvas id=\"playerC\" ref={this.canvasRef} width={this.state.screen.width} height={this.state.screen.height} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the context for the boards canvas and then starts the main animation loop.\r\n   *\r\n   * @memberof EnemyCanvas\r\n   */\r\n  public componentDidMount(): void {\r\n    const ctx = this.canvasRef.current.getContext('2d');\r\n    this.setState({ ctx });\r\n    this.startGame();\r\n    this.setEvents();\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main drawloop. Resets the game if flagged and then calls the update functions\r\n   * for the game.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private update(): void {\r\n    this.drawCells(this.playerCells);\r\n    if (this.props.GameState.ResP) {\r\n      this.startGame();\r\n      this.props.GameState.ResP = false;\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n    if (this.props.GameState.GameStatus === 1 && this.props.GameState.CurrentTurn === 'Enemy') {\r\n      this.playGame();\r\n    }\r\n    if (this.state.GameStatus === 2) {\r\n      // #TODO ENDGAME\r\n    }\r\n    requestAnimationFrame(() => {\r\n      this.update();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets up the game for the player and also resets the game when flagged.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private startGame(): void {\r\n    this.setState({\r\n      GameStatus: GameStatus.Setup,\r\n    });\r\n    this.playerCells = [];\r\n    this.shipCells = [];\r\n    this.ship = 0;\r\n    this.currentShip = this.ships[this.ship];\r\n    this.playerBoard = new Board('player');\r\n    this.playerCells = this.addCells(0, 0, 'player');\r\n    this.props.GameState.CurrentShip = 'Carrier';\r\n    this.props.GameState.GameStatus = GameStatus.Setup;\r\n    this.setState({ CurrentShip: 'Carrier' });\r\n    this.ships = this.createShipList();\r\n    this.props.updateGameState(this.props.GameState);\r\n    this.setState(prevState => {\r\n      const ShipParts = { ...prevState.ShipParts };\r\n      ShipParts.Carrier = 5;\r\n      ShipParts.Battleship = 4;\r\n      ShipParts.Cruiser = 3;\r\n      ShipParts.Submarine = 3;\r\n      ShipParts.Destroyer = 2;\r\n      return { ShipParts };\r\n    });\r\n    this.setState({ ShipRemaining: 5, clicks: 0 });\r\n  }\r\n\r\n  /**\r\n   * Checks the remaining ships for the player. If none are Left the enemy has won.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkRemainingShips(): void {\r\n    this.setState({\r\n      ShipRemaining: this.state.ShipRemaining - 1,\r\n    });\r\n    this.props.GameState.PlayerShipsR--;\r\n    this.props.updateGameState(this.props.GameState);\r\n    if (this.state.ShipRemaining === 0) {\r\n      this.props.GameState.Winner = 'Enemy Wins!';\r\n      this.props.GameState.GameStatus = GameStatus.GameOver;\r\n      this.props.updateGameState(this.props.GameState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Main gameloop with dummy AI. AI picks cells that haven't been\r\n   * selected at random\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private playGame(): void {\r\n    const randomCell: number = Math.floor(Math.random() * (99 - 0 + 1)) + 0;\r\n    const cell = this.playerCells[randomCell];\r\n    if (cell.part !== 'empty' && !cell.hit) {\r\n      if (cell.part === 'Carrier') {\r\n        this.setState(prevState => {\r\n          const ShipParts = { ...prevState.ShipParts };\r\n          ShipParts.Carrier--;\r\n          return { ShipParts };\r\n        });\r\n        if (this.state.ShipParts.Carrier === 0) {\r\n          this.checkRemainingShips();\r\n        }\r\n      } else if (cell.part === 'Battleship') {\r\n        this.setState(prevState => {\r\n          const ShipParts = { ...prevState.ShipParts };\r\n          ShipParts.Battleship--;\r\n          return { ShipParts };\r\n        });\r\n        if (this.state.ShipParts.Battleship === 0) {\r\n          this.checkRemainingShips();\r\n        }\r\n      } else if (cell.part === 'Cruiser') {\r\n        this.setState(prevState => {\r\n          const ShipParts = { ...prevState.ShipParts };\r\n          ShipParts.Cruiser--;\r\n          return { ShipParts };\r\n        });\r\n        if (this.state.ShipParts.Cruiser === 0) {\r\n          this.checkRemainingShips();\r\n        }\r\n      } else if (cell.part === 'Submarine') {\r\n        this.setState(prevState => {\r\n          const ShipParts = { ...prevState.ShipParts };\r\n          ShipParts.Submarine--;\r\n          return { ShipParts };\r\n        });\r\n        if (this.state.ShipParts.Submarine === 0) {\r\n          this.checkRemainingShips();\r\n        }\r\n      } else {\r\n        this.setState(prevState => {\r\n          const ShipParts = { ...prevState.ShipParts };\r\n          ShipParts.Destroyer--;\r\n          return { ShipParts };\r\n        });\r\n        if (this.state.ShipParts.Destroyer === 0) {\r\n          this.checkRemainingShips();\r\n        }\r\n      }\r\n      this.playerCells[randomCell].hit = true;\r\n      this.playerCells[randomCell].c = 'red';\r\n      this.playerCells[randomCell].part = 'empty'; // #TODO: Fix this up.\r\n      this.props.GameState.CurrentTurn = 'Player';\r\n      const move: IMoveListItem = {\r\n        Player: 'Enemy',\r\n        Move: 'Hit!',\r\n      };\r\n      this.props.updateMoves(move);\r\n      this.props.updateGameState(this.props.GameState);\r\n    } else if (cell.part === 'empty' && !cell.hit) {\r\n      this.playerCells[randomCell].hit = true;\r\n      this.playerCells[randomCell].c = 'white';\r\n      this.playerCells[randomCell].part = 'empty'; // #TODO: Fix this up.\r\n      this.props.GameState.CurrentTurn = 'Player';\r\n      const move: IMoveListItem = {\r\n        Player: 'Enemy',\r\n        Move: 'Miss!',\r\n      };\r\n      this.props.updateMoves(move);\r\n      this.props.updateGameState(this.props.GameState);\r\n    } else {\r\n      this.playGame();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the events for mouse clicks and mouse overs.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private setEvents(): void {\r\n    const canvas = this.canvasRef.current;\r\n    canvas.addEventListener('click', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.state.GameStatus === 0) {\r\n        this.toggleCell(this.playerCells, x, y);\r\n        this.checkValid();\r\n        if (this.state.clicks === this.currentShip.size) {\r\n          this.finalCheck();\r\n        }\r\n        this.checkShipTurn();\r\n      }\r\n    });\r\n\r\n    this.canvasRef.current.addEventListener('mousemove', event => {\r\n      const x = event.clientX - canvas.getBoundingClientRect().left;\r\n      const y = event.clientY - canvas.getBoundingClientRect().top;\r\n      if (this.state.GameStatus === 0) {\r\n        this.hoverEffect(this.playerCells, x, y);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update which ship is being placed in the game state.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private updateCurrentShip(): void {\r\n    this.props.GameState.CurrentShip = this.state.CurrentShip;\r\n    this.props.updateGameState(this.props.GameState);\r\n  }\r\n\r\n  /**\r\n   * Generates and sets the ship parts for the player.\r\n   *\r\n   * @private\r\n   * @returns {Ship[]}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private createShipList(): Ship[] {\r\n    const ships = [];\r\n    const carr = new Ship('Carrier', 5, '#752323');\r\n    const bat = new Ship('Battleship', 4, '#442375');\r\n    const cru = new Ship('Cruiser', 3, '#2e7523');\r\n    const sub = new Ship('Submarine', 3, '#23756e');\r\n    const dest = new Ship('Destroyer', 2, '#727523');\r\n    ships.push(carr);\r\n    ships.push(bat);\r\n    ships.push(cru);\r\n    ships.push(sub);\r\n    ships.push(dest);\r\n    return ships;\r\n  }\r\n\r\n  /**\r\n   * Draws the cells within the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} cells\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private drawCells(cells: BoardCell[]): void {\r\n    const ctx = this.state.ctx;\r\n    cells.forEach(cell => {\r\n      if (cell.part === 'empty') {\r\n        ctx.fillStyle = cell.c;\r\n        ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n      } else if (cell.part !== 'empty') {\r\n        this.ships.forEach(ship => {\r\n          if (ship.name === cell.part) {\r\n            ctx.fillStyle = ship.c;\r\n          }\r\n        });\r\n        ctx.fillRect(cell.x + 1, cell.y + 1, cell.w - 2, cell.w - 2);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generates the BoardCell array.\r\n   *\r\n   * @private\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {string} s\r\n   * @returns {BoardCell[]}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private addCells(x: number, y: number, s: string): BoardCell[] {\r\n    const newArray: BoardCell[] = new Array(100);\r\n    for (let i = 0; i < 10; i++) {\r\n      for (let n = 0; n < 10; n++) {\r\n        newArray[i + n * 10] = new BoardCell(i * 50 + x, n * 50 + y, s);\r\n        newArray[i + n * 10].c = s === 'enemy' ? '#8F282F' : '#464478';\r\n      }\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  /**\r\n   * Check which ship the player should be currently placing and then starts the\r\n   * game when the last ship is placed.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkShipTurn(): void {\r\n    if (this.shipCells.length === this.currentShip.size) {\r\n      if (this.currentShip.name === 'Destroyer') {\r\n        this.setState({ GameStatus: GameStatus.Playing });\r\n        this.props.GameState.GameStatus = this.state.GameStatus;\r\n        this.props.GameState.CurrentTurn = 'Player';\r\n        this.props.updateGameState(this.props.GameState);\r\n        this.playerBoard = new Board('player');\r\n        this.playerCells.forEach(cell => {\r\n          if (cell.part === 'empty') {\r\n            this.playerBoard.board.push(0);\r\n          } else if (cell.part === 'Carrier') {\r\n            this.playerBoard.board.push(1);\r\n          } else if (cell.part === 'Battleship') {\r\n            this.playerBoard.board.push(2);\r\n          } else if (cell.part === 'Cruiser') {\r\n            this.playerBoard.board.push(3);\r\n          } else if (cell.part === 'Submarine') {\r\n            this.playerBoard.board.push(4);\r\n          } else {\r\n            this.playerBoard.board.push(5);\r\n          }\r\n        });\r\n      } else {\r\n        this.setState({ clicks: 0 });\r\n        this.ship++;\r\n        this.currentShip = this.ships[this.ship];\r\n        this.setState({ CurrentShip: this.currentShip.name });\r\n        this.updateCurrentShip();\r\n        this.shipCells = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the BoardCells depending what ship the player is placing.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private toggleCell(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    if (this.state.GameStatus === 0) {\r\n      this.props.GameState.SetupMessages = '';\r\n      this.props.updateGameState(this.props.GameState);\r\n      arr.forEach(cell => {\r\n        if (cell.contains(x, y) && this.state.clicks !== this.currentShip.size && cell.part === 'empty') {\r\n          this.shipCells.push(cell);\r\n          cell.part = this.currentShip.name;\r\n          this.setState({ clicks: this.state.clicks + 1 });\r\n        }\r\n      });\r\n    } else {\r\n      // #TODO: Can probably remove this old code.\r\n      arr.forEach(cell => {\r\n        if (cell.contains(x, y) && this.state.clicks !== this.currentShip.size && cell.part === 'empty') {\r\n          this.shipCells.push(cell);\r\n          cell.part = 'enemy';\r\n          ctx.fillStyle = 'red';\r\n          ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n          this.setState({ clicks: this.state.clicks + 1 });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private checkValid(): void {\r\n    if (!this.checkValidCell()) {\r\n      this.clearInvalid();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets the cells the players ship is in if its invalid.\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private clearInvalid(): void {\r\n    this.props.GameState.SetupMessages = 'Invalid Ship Placement';\r\n    this.props.updateGameState(this.props.GameState);\r\n    this.playerCells.forEach(cell => {\r\n      if (cell.part === this.currentShip.name) {\r\n        cell.part = 'empty';\r\n      }\r\n    });\r\n    this.shipCells = [];\r\n    this.setState({ clicks: 0 });\r\n  }\r\n\r\n  /**\r\n   * Checks to see if there are any invalid moves from the player once their ship\r\n   * has been replaced. This is done by checking their direction it was placed\r\n   * and flagging it invalid if its invalid if they are not along the right x/y\r\n   * location\r\n   *\r\n   * @private\r\n   * @returns {boolean}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private checkValidCell(): boolean {\r\n    let direction: string;\r\n    if (this.shipCells.length === 1) {\r\n      return true;\r\n    } else if (this.shipCells.length > 1) {\r\n      if (this.shipCells[0].x === this.shipCells[1].x) {\r\n        direction = 'h';\r\n      } else if (this.shipCells[0].y === this.shipCells[1].y) {\r\n        direction = 'v';\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < this.shipCells.length; i++) {\r\n        if (direction === 'h') {\r\n          if (this.shipCells[0].x !== this.shipCells[i].x) {\r\n            return false;\r\n          }\r\n        } else if (direction === 'v') {\r\n          if (this.shipCells[0].y !== this.shipCells[i].y) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Last check to see if the player has correctly placed the ship. Every cell\r\n   * is checked within 50 pixels to make sure they are all connected.\r\n   *\r\n   * @private\r\n   * @returns {void}\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private finalCheck(): void {\r\n    let direction: string;\r\n    const cellCheck = this.playerCells.filter(cell => cell.part === this.currentShip.name);\r\n    if (cellCheck[0].x === cellCheck[1].x) {\r\n      direction = 'v';\r\n    } else if (cellCheck[0].y === cellCheck[1].y) {\r\n      direction = 'h';\r\n    }\r\n    for (let i = 0, n = 1; i < cellCheck.length - 1; i++, n++) {\r\n      if (direction === 'h') {\r\n        if (cellCheck[i].x + 50 === cellCheck[n].x || cellCheck[i].x - 50 === cellCheck[n].x) {\r\n          continue;\r\n        }\r\n\r\n        this.clearInvalid();\r\n        return;\r\n      }\r\n      if (direction === 'v') {\r\n        if (cellCheck[i].y + 50 === cellCheck[n].y || cellCheck[i].y - 50 === cellCheck[n].y) {\r\n          continue;\r\n        }\r\n        this.clearInvalid();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a hover type effect over the given boardcell.\r\n   *\r\n   * @private\r\n   * @param {BoardCell[]} arr\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @memberof EnemyCanvas\r\n   */\r\n  private hoverEffect(arr: BoardCell[], x: number, y: number): void {\r\n    const ctx = this.state.ctx;\r\n    arr.forEach(cell => {\r\n      if (cell.contains(x, y) && cell.part === 'empty') {\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(cell.x, cell.y, cell.w, cell.w);\r\n      } else if (cell.part === 'empty') {\r\n        ctx.clearRect(cell.x, cell.y, cell.w, cell.w);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * TODO\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private exportBoard(): void {\r\n    //Export the players board to the server.\r\n  }\r\n\r\n  /**\r\n   * TODO\r\n   *\r\n   * @private\r\n   * @memberof PlayerCanvas\r\n   */\r\n  private endGame(): void {}\r\n}\r\n","import * as React from 'react';\r\nimport { IGameProp, IGameState, IMoveListItem, IPlayAreaProp } from '../interface/IGameProp';\r\nimport { EnemyCanvas } from './canvas/EnemyCanvas';\r\nimport { PlayerCanvas } from './canvas/PlayerCanvas';\r\nimport { StatusArea } from './StatusArea/StatusArea';\r\nimport { Chat } from './chat/Chat';\r\n\r\nexport enum GameStatus {\r\n  Setup,\r\n  Playing,\r\n  GameOver,\r\n}\r\n\r\nexport class PlayArea extends React.Component<IPlayAreaProp, IGameProp> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      roomID: this.props.roomid,\r\n      GameState: {\r\n        CurrentShip: null,\r\n        CurrentTurn: null,\r\n        Moves: [],\r\n        GameStatus: GameStatus.Setup,\r\n        ResE: false,\r\n        ResP: false,\r\n        Winner: null,\r\n        PlayerName: this.props.player,\r\n        EnemyName: this.props.enemy,\r\n        EnemyShipsR: 5,\r\n        PlayerShipsR: 5,\r\n        SetupMessages: null,\r\n      },\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let button;\r\n    if (this.state.GameState.GameStatus === 1) {\r\n      button = (\r\n        <button className=\"btn btn-primary\" id=\"Reset\" disabled={false} onClick={this.readyAction}>\r\n          Ready\r\n        </button>\r\n      );\r\n    } else {\r\n      button = (\r\n        <button className=\"btn btn-primary\" id=\"Reset\" disabled={true} onClick={this.readyAction}>\r\n          Ready\r\n        </button>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"play-area\">\r\n        <EnemyCanvas\r\n          updateGameState={this.updateGameState}\r\n          updateMoves={this.updateMoves}\r\n          GameState={this.state.GameState}\r\n          roomID={this.state.roomID}\r\n        />\r\n        <PlayerCanvas\r\n          updateGameState={this.updateGameState}\r\n          updateMoves={this.updateMoves}\r\n          GameState={this.state.GameState}\r\n          roomID={this.state.roomID}\r\n        />\r\n        <StatusArea GameState={this.state.GameState} roomID={this.state.roomID} />\r\n\r\n        <div className=\"reset\">{button}</div>\r\n\r\n        <Chat\r\n          username={this.state.GameState.PlayerName}\r\n          roomID={this.state.roomID}\r\n          enemyName={this.state.GameState.EnemyName}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates the Game State with the provided data.\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private updateGameState = (dataFromChild: IGameState): void => {\r\n    this.setState((prevState: any) => {\r\n      let GameState: IGameState = { ...prevState.GameState };\r\n      GameState = dataFromChild;\r\n      return { GameState };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Updates the move list for the players\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private updateMoves = (moveUpdate: IMoveListItem): void => {\r\n    this.setState((prevState: any) => {\r\n      const GameState: IGameState = { ...prevState.GameState };\r\n      GameState.Moves.push(moveUpdate);\r\n      return { GameState };\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Flags the game to restart for the two player canvas's and then resets the\r\n   * state of the game.\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private restartGame = (): void => {\r\n    this.setState((prevState: any) => {\r\n      const GameState: IGameState = { ...prevState.GameState };\r\n      GameState.CurrentShip = null;\r\n      GameState.CurrentTurn = null;\r\n      GameState.Moves = [];\r\n      GameState.GameStatus = GameStatus.Setup;\r\n      GameState.ResE = false;\r\n      GameState.ResP = false;\r\n      GameState.Winner = null;\r\n      GameState.EnemyShipsR = 5;\r\n      GameState.PlayerShipsR = 5;\r\n      GameState.ResE = true;\r\n      GameState.ResP = true;\r\n      return { GameState };\r\n    });\r\n  };\r\n  private readyAction = (): void => {\r\n    console.log(JSON.stringify(this.state));\r\n  };\r\n\r\n  public componentDidMount() {\r\n    console.log('Mount');\r\n  }\r\n\r\n  /**\r\n   * Load the game state from the server if this is a brand new game.\r\n   * #TODO:\r\n   *\r\n   * @private\r\n   * @memberof PlayArea\r\n   */\r\n  private loadGame = (): void => {};\r\n}\r\n","import * as React from 'react';\r\n\r\nexport default class StatusMessage extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <div className=\"status-name\">{this.props.player}</div>\r\n        <div className=\"status-msg\">{this.props.move}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport StatusMessage from './StatusMessage';\r\nimport { IMoveListItem } from '../../interface/IGameProp';\r\n\r\nexport default class StatusBox extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    const messages: IMoveListItem[] = this.props.messages.map((message:IMoveListItem, i:number) => {\r\n      return <StatusMessage key={i} player={message.Player} move={message.Move} />;\r\n    });\r\n    return (\r\n      <div className=\"status-messages\" id=\"status-list\">\r\n        {messages}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidUpdate(): void {\r\n    const statusDiv = document.getElementById('status-list');\r\n    statusDiv.scrollTop = statusDiv.scrollHeight;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\ninterface Props {\r\n  currentTurn: string;\r\n}\r\n\r\nexport const StatusTurn: React.FC<Props> = (props: Props): JSX.Element => {\r\n  return <div className=\"current-turn\">{props.currentTurn}'s Turn</div>;\r\n};\r\n","import * as React from 'react';\r\nimport { IGameProp } from '../../interface/IGameProp';\r\nimport '../../styles/status.scss';\r\nimport StatusBox from './StatusBox';\r\nimport { StatusTurn } from './StatusTurn';\r\n\r\nexport class StatusArea extends React.Component<IGameProp, IGameProp> {\r\n  public render(): JSX.Element {\r\n    if (this.props.GameState.GameStatus === 0) {\r\n      return (\r\n        <div className=\"status-area\">\r\n          <div>Currently Placing: {this.props.GameState.CurrentShip}</div>\r\n          <div>{this.props.GameState.SetupMessages}</div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"status-area playing\">\r\n          <StatusTurn currentTurn={this.props.GameState.CurrentTurn} />\r\n          <StatusBox messages={this.props.GameState.Moves} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface ChatMessageProps {\r\n  username: string;\r\n  text: string;\r\n  me: boolean;\r\n}\r\n\r\nexport default class ChatMessage extends React.Component<ChatMessageProps, any> {\r\n  public render(): JSX.Element {\r\n    const sender = this.props.me ? 'player-message' : 'enemy';\r\n    return (\r\n      <div className={sender}>\r\n        <div className=\"username\">{this.props.username}</div>\r\n        <div className=\"message-body\">{this.props.text}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { ChatMessages } from './Chat';\r\nimport ChatMessage from './ChatMessage';\r\n\r\ninterface IChatProps {\r\n  messages: ChatMessages[];\r\n}\r\nexport class ChatBox extends React.Component<IChatProps, any> {\r\n  public render(): JSX.Element {\r\n    const messages = this.props.messages.map((message, i) => {\r\n      return <ChatMessage key={i} username={message.username} text={message.text} me={message.me} />;\r\n    });\r\n\r\n    return (\r\n      <div className=\"messages\" id=\"messageList\">\r\n        {messages}\r\n      </div>\r\n    );\r\n  }\r\n  componentDidUpdate(): void {\r\n    const chatDiv = document.getElementById('messageList');\r\n    chatDiv.scrollTop = chatDiv.scrollHeight;\r\n  }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport class ChatSend extends React.Component<any, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      chatInput: '',\r\n    };\r\n    this.handleText = this.handleText.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleText}\r\n          id=\"chat-box\"\r\n          value={this.state.chatInput}\r\n          placeholder=\"Type a message and press enter...\"\r\n          required\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n  handleText(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    this.setState({ chatInput: e.target.value });\r\n  }\r\n  handleSubmit(e: any): void {\r\n    e.preventDefault();\r\n    this.props.onSend(this.state.chatInput);\r\n    this.setState({chatInput: ''})\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { ChatBox } from './ChatBox';\r\nimport { ChatSend } from './ChatSend';\r\nimport '../../styles/chat.scss';\r\nimport * as chatHistory from './history.json';\r\nimport io from 'socket.io-client';\r\n\r\ninterface ChatState {\r\n  username: string;\r\n}\r\n\r\nexport interface ChatMessages {\r\n  username: string;\r\n  text: string;\r\n  me: boolean;\r\n}\r\n\r\nexport class Chat extends React.Component<any, any> {\r\n  socket = {};\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      username: props.username,\r\n    };\r\n    this.socket = io('http://localhost:5005');\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"chat-area\" id=\"chat\">\r\n        <span className=\"chat-title\">Chat</span>\r\n        <ChatBox messages={this.state.messages} />\r\n        <ChatSend onSend={this.sendMessage} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private sendMessage = (message: any): void => {\r\n    const Message = {\r\n      username: this.state.username,\r\n      text: message,\r\n      me: true,\r\n    };\r\n    //Send message to IO Server.\r\n    // temp demo message\r\n    const TempMessage = {\r\n      username: 'Random Name',\r\n      text: 'Random message back',\r\n      me: false,\r\n    };\r\n    this.updateMessages(Message);\r\n    this.updateMessages(TempMessage);\r\n  };\r\n\r\n  private updateMessages = (message: any): void => {\r\n    const messages = this.state.messages;\r\n    messages.push(message);\r\n    this.setState({ messages });\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport { LinkContainer } from 'react-router-bootstrap';\r\n\r\nexport default class NaviBar extends React.Component<any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <Navbar variant=\"dark\" expand=\"lg\">\r\n        <LinkContainer to=\"/\">\r\n          <Navbar.Brand>ReactShips</Navbar.Brand>\r\n        </LinkContainer>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <LinkContainer to=\"/\">\r\n              <Nav.Link>Home</Nav.Link>\r\n            </LinkContainer>\r\n            {/** \r\n            #TODO: Implement these as drop downs within the game area.\r\n            <LinkContainer to=\"/info\">\r\n              <Nav.Link>Info</Nav.Link>\r\n            </LinkContainer>\r\n            <LinkContainer to=\"/stats\">\r\n              <Nav.Link>Stats</Nav.Link>\r\n            </LinkContainer>\r\n            */}\r\n            <div className=\"navbar-text\">Room ID: {this.props.roomid}</div>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const PlayerHeader: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"player-h\">Player Details</h1>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport '../../styles/login.scss';\r\nimport { PlayerHeader } from './PlayerHeader';\r\ninterface PlayerDetailsProps {\r\n  handleLogin?: any;\r\n  player?: any;\r\n  room?: any;\r\n}\r\n\r\ninterface PlayerDetailsState {\r\n  playerName: string;\r\n  roomID: string;\r\n}\r\n\r\nclass PlayerDetails extends React.Component<PlayerDetailsProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      playerName: '',\r\n      roomID: '',\r\n    };\r\n  }\r\n  public render(): JSX.Element {\r\n    return (\r\n      <form className=\"player-details\" onSubmit={this.handleSubmit}>\r\n        <PlayerHeader />\r\n\r\n        <label>\r\n          <span className=\"player-name\">Please Enter your Player Name</span>\r\n        </label>\r\n\r\n        <input type=\"text\" name=\"playerName\" required onChange={this.handleChange} value={this.state.playerName} />\r\n\r\n        <label>\r\n          <span className=\"room-id\">Room ID</span> {/** Room ID used to connect to other players*/}\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"room-input\"\r\n          name=\"roomID\"\r\n          onChange={this.handleChange}\r\n          value={this.state.roomID}\r\n        />\r\n\r\n        <Button variant=\"outline-success\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  private handleSubmit = (e: any): void => {\r\n    e.preventDefault();\r\n    this.props.player(this.state.playerName);\r\n    this.props.room(this.state.roomID);\r\n    this.props.handleLogin(true);\r\n  };\r\n\r\n  private handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n}\r\n\r\nexport default PlayerDetails;\r\n","import React from 'react';\r\n\r\nfunction ShipTable(): any {\r\n  return (\r\n    <div className=\"ship-table-div\">\r\n      <table className=\"ship-table\">\r\n        <tr>\r\n          <th>Placed</th>\r\n          <th>Ships</th>\r\n          <th>Size</th>\r\n        </tr>\r\n        <tr>\r\n          <td>First</td>\r\n          <td>Carrier</td>\r\n          <td>5</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Second</td>\r\n          <td>Battleship</td>\r\n          <td>4</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Third</td>\r\n          <td>Cruiser</td>\r\n          <td>3</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Fourth</td>\r\n          <td>Submarine</td>\r\n          <td>3</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Fifth</td>\r\n          <td>Destroyer</td>\r\n          <td>2</td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShipTable;\r\n","import * as React from 'react';\r\nimport ShipTable from './ShipTable';\r\nimport '../../styles/info.scss';\r\n\r\n/**\r\n * TODO: Create a drop down box with this information within the player area, Currently not implemented\r\n * \r\n *\r\n * @class Info\r\n * @extends {React.Component<any, any>}\r\n */\r\nclass Info extends React.Component<any, any> {\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"info-area\">\r\n        <div className=\"info-heading\">\r\n          <h1>Info</h1>\r\n        </div>\r\n        <div className=\"info-text\">\r\n          <p>\r\n            ReactShips is a clone of the classic board game Battle Ships. The game starts out with each player placing\r\n            their 5 ships on their own board. Each ship can only place in the vertical or horizontal direction, They\r\n            cannot be placed diagonally or a mix of vertical or horizontal. Ships consist of the following sizes:\r\n            <ShipTable />\r\n            After these ships are placed each player takes turn guessing which squares the other player has placed their\r\n            ships. If a ship is hit a square will turn red and if its a miss the square will turn white. The first\r\n            player to sink all the other players ships is the winner of the game.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;\r\n","import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport interface IStatsProps {}\r\n/**\r\n * TODO: Create a drop down box with this information within the player area, Currently not implemented\r\n * \r\n *\r\n * @class Stats\r\n * @extends {React.Component<any, any>}\r\n */\r\nexport default class Stats extends React.Component<IStatsProps> {\r\n  public render(): JSX.Element {\r\n    return <div id=\"chart-test\"></div>;\r\n  }\r\n  componentDidMount(): void {\r\n    this.drawChart();\r\n  }\r\n  drawChart(): void {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n\r\n    const svg = d3\r\n      .select('#chart-test')\r\n      .append('svg')\r\n      .attr('width', 700)\r\n      .attr('height', 300);\r\n\r\n    svg\r\n      .selectAll('rect')\r\n      .data(data)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', (d, i) => i * 70)\r\n      .attr('y', (d, i) => 300 - 10 * d)\r\n      .attr('width', 25)\r\n      .attr('height', (d, i) => d * 10)\r\n      .attr('fill', 'green');\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport { PlayArea } from './PlayArea';\r\nimport NaviBar from './NaviBar';\r\nimport PlayerDetails from './PlayerDetails/PlayerDetails';\r\nimport Info from './Info/Info';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport Stats from './Stats/Stats';\r\n\r\ninterface AppState {\r\n  login: boolean;\r\n  playerName?: string;\r\n  roomID?: string;\r\n  enemyName?: string;\r\n}\r\n\r\nexport default class App extends React.Component<any, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      login: false,\r\n      playerName: 'Player',\r\n      enemyName: 'No Enemy Ready',\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    if (this.state.login) {\r\n      return (\r\n        <Router>\r\n          <div>\r\n            <NaviBar roomid={this.state.roomID} />\r\n            <Switch>\r\n              <Route\r\n                path=\"/\" //#TODO: Add dynamic route for the roomID\r\n                exact\r\n                render={(routeProps): any => (\r\n                  <PlayArea\r\n                    {...routeProps}\r\n                    player={this.state.playerName}\r\n                    enemy={this.state.enemyName}\r\n                    roomid={this.state.roomID}\r\n                  />\r\n                )}\r\n              />\r\n              <Route path=\"/info\" exact component={Info} />\r\n              <Route path=\"/stats\" exact component={Stats} />\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Navbar variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand>ReactShips</Navbar.Brand>\r\n          </Navbar>\r\n          <div className=\"login-container\">\r\n            <PlayerDetails handleLogin={this.handleLogin} player={this.getDetails} room={this.getRoomID} />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  getDetails = (name: string): any => {\r\n    this.setState({ playerName: name });\r\n  };\r\n\r\n  getRoomID = async (id: string): Promise<any> => {\r\n    if (id.length < 1) {\r\n      const data = await fetch('http://localhost:5005/gameID');\r\n\r\n      const id = await data.json();\r\n      console.log(id);\r\n      this.setState({ roomID: id.id });\r\n    } else {\r\n      this.setState({ roomID: id });\r\n    }\r\n  };\r\n  /*\r\n  getEnemy = () =>{\r\n\r\n  }*/\r\n\r\n  handleLogin = (b: boolean): void => {\r\n    this.setState({ login: b });\r\n  };\r\n}\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './styles/app.scss';\r\n\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}